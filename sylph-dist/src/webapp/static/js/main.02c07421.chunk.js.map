{"version":3,"sources":["Menu.js","Login.js","JobList.js","lib/AnsiColors.js","ServerLog.js","lib/EditableTable.js","StreamingSql.js","StreamingEtl.js","ConnectorList.js","ConnectorManager.js","App.js","index.js"],"names":["Sider","Layout","SubMenu","Menu","SideMenu","state","collapsed","onCollapse","console","log","_this","setState","render","react_default","a","createElement","collapsible","className","style","color","width","textAlign","fontSize","margin","menu","theme","defaultSelectedKeys","mode","Item","key","Link","to","icon","type","title","onClick","props","logout","React","Component","Login","this","afterLogin","getFieldDecorator","form","es_form","onSubmit","e","preventDefault","validateFields","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","err","values","result","wrap","_context","prev","next","fetch","method","body","JSON","stringify","headers","content-type","sent","json","userName","concat","user","stop","_x","_x2","apply","arguments","rules","required","message","input","prefix","placeholder","valuePropName","initialValue","es_checkbox","href","es_button","htmlType","WrappedNormalLoginForm","Form","create","name","JobList","deploys","jobList","columns","dataIndex","runId","record","index","status","setJobListItem","item","assign","jobId","intervalId","setInterval","fetchData","clearInterval","defineProperty","objectSpread","tag","length","window","open","appUrl","text","DeployBtn","popconfirm","onConfirm","handleDeployOrStop","okText","cancelText","placement","StopBtn","divider","toLink","history","push","pathname","openNotificationWithIcon","description","notification","duration","loadjobs","data","visible","modal","onOk","jobName","refs","create_new_job_id","value","onCancel","ref","table","bordered","pagination","dataSource","rowKey","path","success","error_code","action","AnsiColors","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","regexp","symbolList","match","splitList","split","colorMap","\u001b[30m","\u001b[31m","\u001b[32m","\u001b[33m","\u001b[34m","\u001b[35m","\u001b[36m","\u001b[37m","\u001b[39m","\u001b[m","renderList","row","i","marginBottom","overflow","ServerLog","arrLogs","last_num","id","height","map","AnsiColors_AnsiColors","val","stickToBottom","logs","time","Date","getTime","num","shift","log1","scroll_con","scrollTop","scrollHeight","clientHeight","url","prems","Math","random","showlog","t0","_this2","EditableContext","createContext","EditableFormRow","objectWithoutProperties","Provider","EditableCell","_getPrototypeOf2","_len","args","Array","_key","call","editing","toggleEdit","focus","save","_this$props","handleSave","error","currentTarget","renderCell","_this$props2","children","node","onPressEnter","onBlur","paddingRight","_this$props3","editable","restProps","Consumer","StreamingSql","context","engine","query","config","editConfig","showErrorMessage","saveing","showDrawer","Option","Select","components","cell","col","onCell","es_alert","showIcon","closable","onClose","getErrorMessage","es_row","es_col","span","padding","es_select","defaultValue","onSelect","jobSave","saveingIcon","react_codemirror2","min-height","options","lineNumbers","extraKeys","Ctrl","onChange","editor","drawer","scroll","y","pageSize","keys","position","left","bottom","borderTop","background","marginRight","params","undefined","location","queryText","parse","fetchGetData","graph","jobType","target","ConnectorList","connectors","expandedRowRender","_concat","toConsumableArray","ConnectorManager","loading","connector","reloadConnectors","bind","assertThisInitialized","loadingIcon","drivers","x","Content","App","login","layout","minHeight","Menu_SideMenu","Route","exact","component","StreamingEtl","password","Modal","confirm","content","_onOk","_callee2","_context2","ReactDOM","HashRouter","document","getElementById"],"mappings":"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","file":"static/js/main.02c07421.chunk.js","sourcesContent":["import React from \"react\";\nimport { Layout, Menu, Icon } from \"antd\";\nimport { Link } from \"react-router-dom\";\nconst { Sider } = Layout;\nconst { SubMenu } = Menu;\n\nexport default class SideMenu extends React.Component {\n  state = {\n    collapsed: false\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  render = () => (\n    <Sider\n      collapsible\n      collapsed={this.state.collapsed}\n      onCollapse={this.onCollapse}\n    >\n      <div\n        className=\"logo\"\n        style={{\n          color: \"white\",\n          width: \"100%\",\n          textAlign: \"center\",\n          fontSize: \"20px\",\n          margin: \"15px 0\"\n        }}\n      >\n        Sylph\n      </div>\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n        <Menu.Item key=\"1\">\n          <Link to=\"/joblist\">\n            <Icon type=\"tool\" />\n            JobManager\n          </Link>\n        </Menu.Item>\n\n        <SubMenu\n          key=\"2\"\n          title={\n            <span>\n              <Icon type=\"tool\" />\n              <span>Connector</span>\n            </span>\n          }\n        >\n          <Menu.Item key=\"2\">\n            <Link to=\"/connectors\">\n              <Icon type=\"tool\" />\n              Connectors\n          </Link>\n          </Menu.Item>\n          <Menu.Item key=\"3\">\n            <Link to=\"/connector_manager\">\n              <Icon type=\"tool\" />\n              Manager\n          </Link>\n          </Menu.Item>\n        </SubMenu>\n\n\n        <Menu.Item key=\"5\">\n          <Link to=\"/serverLogs\">\n            <Icon type=\"tool\" />\n            ServerLogs\n          </Link>\n        </Menu.Item>\n        <SubMenu\n          key=\"sub1\"\n          title={\n            <span>\n              <Icon type=\"user\" />\n              <span>User</span>\n            </span>\n          }\n        >\n          <Menu.Item key=\"7\">\n            <span onClick={this.props.logout}>\n              <Icon type=\"tool\" />\n              Logout\n            </span>\n          </Menu.Item>\n        </SubMenu>\n      </Menu>\n    </Sider>\n  );\n}\n","import React from 'react'\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\n\nclass Login extends React.Component {\n    render() {\n        let { afterLogin } = this.props;\n        const handleSubmit = e => {\n            e.preventDefault();\n            this.props.form.validateFields(async (err, values) => {\n                if (!err) {\n                    console.log('Received values of form: ', values);\n                }\n                let result = await fetch(\"/_sys/auth/login\", {\n                    method: \"POST\",\n                    body: JSON.stringify(values),\n                    headers: {\n                        \"content-type\": \"application/json\"\n                    }\n                });\n                result = await result.json();\n                if (result.userName === values.userName) {\n                    console.log(`${values.user} login ok`)\n                    afterLogin(result.userName)\n                }\n            });\n        };\n\n\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={handleSubmit} style={{ width: \"25vw\", margin: \"10vh auto 0 auto\" }}>\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <div>\n                        {getFieldDecorator('remember', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(<Checkbox>Remember me</Checkbox>)}\n                        <a className=\"login-form-forgot\" href=\"\">\n                            Forgot password\n                    </a>\n                    </div>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Log in\n                    </Button>\n                    Or <a href=\"\">register now!</a>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(Login);","import React from \"react\";\nimport { Table, Modal, notification, Tag, Divider, Button, Popconfirm, Icon, Input } from \"antd\";\n\nexport default class JobList extends React.Component {\n  deploys = {}\n\n  state = {\n    jobList: [],\n\n    columns: [\n      {\n        title: \"Job\",\n        dataIndex: \"jobName\",\n        key: 'jobName',\n      },\n      {\n        title: \"runId\",\n        dataIndex: \"runId\",\n        key: 'runId',\n        width: 200,\n        render: (runId, record, index) => {\n          if (record.status === 'DEPLOYING') {\n            let setJobListItem = (item) => Object.assign([], this.state.jobList, item);\n            if (!this.deploys[record.jobId]) {\n              var intervalId = setInterval(async () => {\n                var result = await this.fetchData(`/job/${record.jobId}`)\n\n                if (result.status !== \"DEPLOYING\") {\n                  clearInterval(this.deploys[record.jobId])\n                  this.setState({ jobList: setJobListItem({ [index]: { ...result } }) });\n                  delete this.deploys[record.jobId]\n                } else {\n                  this.setState({ jobList: setJobListItem({ [index]: { ...result } }) });\n                }\n              }, 1000)\n              this.deploys[record.jobId] = intervalId;\n            }\n\n            return (\n              <Tag color={\"blue\"} key={runId}>\n                <Icon type=\"loading\" />\n                &nbsp;&nbsp;processing...\n              </Tag>\n            );\n          }\n\n          if (runId && runId.length > 0) {\n            return (\n              <Tag color={\"blue\"} key={runId} onClick={() => window.open(record.appUrl)}>\n                {runId}\n              </Tag>\n            );\n          }\n          return <Tag color={\"red\"}>{\"暂无\"}</Tag>;\n        }\n      },\n      {\n        title: \"type\",\n        dataIndex: \"type\",\n        key: 'type',\n      },\n      {\n        title: \"status\",\n        dataIndex: \"status\",\n        key: 'status',\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        render: (text, record, index) => {\n          let DeployBtn = (\n            <Popconfirm\n              title=\"Are you sure deploy this job?\"\n              onConfirm={() =>\n                this.handleDeployOrStop('deploy', record.jobId)\n              }\n              okText=\"Yes\"\n              cancelText=\"No\"\n              placement=\"left\"\n            >\n              <a href=\"/#\">Deploy</a>\n            </Popconfirm >\n          );\n          let StopBtn = (\n            <Popconfirm\n              title=\"Are you sure stop this job?\"\n              onConfirm={() => {\n                this.handleDeployOrStop('stop', record.jobId);\n              }}\n              okText=\"Yes\"\n              cancelText=\"No\"\n              placement=\"left\"\n            >\n              <a href=\"/#\">Stop</a>\n            </Popconfirm>\n          );\n          return (\n            <span>\n              {record.status === \"STOP\" ? DeployBtn : StopBtn}\n              < Divider type=\"vertical\" />\n\n              <Popconfirm\n                title=\"Are you sure Delete this job?\"\n                onConfirm={() => {\n                  this.handleDeployOrStop('delete', record.jobId);\n                }}\n                okText=\"Yes\"\n                cancelText=\"No\"\n                placement=\"left\"\n              >\n                <a href=\"/#\" style={{ color: \"red\" }}>Delete</a>\n              </Popconfirm>\n              <Divider type=\"vertical\" />\n              <a onClick={() => {\n                var toLink;\n                var type = record.type;\n                if (type === 'FlinkStreamSql' || type === 'FlinkMainClass' || type === 'StructuredStreamingSql' || type === 'SparkStreamingSql') {\n                  toLink = `/streamingSql/${record.jobId}`;\n                } else {\n                  toLink = `/streamingEtl/${record.jobId}`;\n                }\n                this.props.history.push({ pathname: toLink, state: {} });\n              }}>Edit</a>\n            </span>\n          );\n        }\n      }\n    ]\n  };\n\n  openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message: message,\n      description: description,\n      duration: 6\n    });\n  };\n\n  async fetchData(path) {\n    let result = await fetch(`/_sys/job_manger${path}`, { method: \"GET\" });\n    result = await result.json();\n\n    if (result.success === false) {\n      this.openNotificationWithIcon('error', result.error_code, result.message)\n      return;\n    }\n    return result;\n  }\n\n  async handleDeployOrStop(action, jobId) {\n    await this.fetchData(`/${action}/${jobId}`);\n    await this.loadjobs();\n  }\n\n  async loadjobs() {\n    var result = await this.fetchData(\"/jobs\");\n    result && this.setState({ jobList: result });\n  }\n\n\n\n  componentWillMount() {\n    this.loadjobs();\n  }\n\n  render = () => {\n    return (\n      <div>\n        <div style={{ textAlign: \"right\", margin: \"20px 10px\" }}>\n          <Button\n            type=\"primary\"\n            icon=\"reload\"\n            onClick={() => this.loadjobs()}\n          >\n            Refresh\n          </Button>\n          <Button style={{ margin: \"0 10px\" }} type=\"primary\" icon=\"folder-add\" onClick={() => {\n            this.props.history.push(\"/streamingEtl\", { data: {} });\n          }}>\n            Create_ETL\n          </Button>\n          <Button type=\"primary\" icon=\"folder-add\" onClick={() => this.setState({ visible: true })}>\n            Create_StreamSQL\n          </Button>\n          <Modal\n            title=\"Create New StreamSQL\"\n            visible={this.state.visible}\n            onOk={() => {\n              this.setState({ visible: false });\n              var jobName = this.refs.create_new_job_id.state.value\n              this.props.history.push({\n                pathname: `/streamingSql`,\n                state: { jobName: jobName, create: true }\n              });\n            }}\n            onCancel={() => { this.setState({ visible: false }); }}\n          >\n            JobId: <Input placeholder=\"please enter job id\" ref=\"create_new_job_id\"></Input>\n          </Modal>\n        </div>\n        <Table\n          bordered\n          pagination={false}\n          dataSource={this.state.jobList}\n          columns={this.state.columns}\n          rowKey={\"jobId\"}\n        />\n      </div>\n    );\n  };\n}\n","\nimport React from 'react';\n\nexport class AnsiColors extends React.Component {\n    render() {\n        let { log } = this.props;\n        let regexp = /\u001b\\[\\d*m/g;\n        let symbolList = log.match(regexp);\n        let splitList = log.split(regexp);\n        let colorMap = {\n            '\u001b[30m': \"black\",\n            '\u001b[31m': \"red\",\n            '\u001b[32m': \"green\",\n            '\u001b[33m': \"#dab633\",   //\"yellow\",\n            '\u001b[34m': \"blue\",\n            '\u001b[35m': \"magenta\",\n            '\u001b[36m': \"cyan\",\n            '\u001b[37m': \"white\",\n            '\u001b[39m': \"default\",\n            '\u001b[m': \"black\"\n        }\n        let renderList = [];\n        let row = []\n        for (let i = 0; i < splitList.length; i++) {\n            if (i === 0) {\n                row.push(<span style={{ color: 'black' }}>{splitList[i]}</span>)\n                continue;\n            }\n            row.push(<span style={{ color: colorMap[symbolList[i - 1]] }}>{splitList[i]}</span>)\n        }\n        renderList.push(<pre style={{ marginBottom: '0em', overflow: 'visible' }}>{row}</pre>);\n\n        return (\n            <div >\n                {renderList}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { AnsiColors } from \"./lib/AnsiColors\";\n\nexport default class ServerLog extends React.Component {\n    state = {\n        arrLogs: [],\n        last_num: -1,\n        id: null,\n        intervalId: null\n    };\n    showlog(json) {\n        var stickToBottom = true;\n        if (json !== \"\" && json !== null) {\n            if (json.logs === null || json.logs.length === 0) {\n                return\n            }\n\n            var time = new Date().getTime();\n            for (let num in json.logs) {\n                if (this.state.arrLogs.length > 1000) {\n                    this.state.arrLogs.shift()  //删除第一个元素\n                }\n                this.state.arrLogs.push({ key: time + \"_\" + num, val: json.logs[num] })\n            }\n\n            let log1 = this.refs.scroll_con;\n            if (log1.scrollTop < log1.scrollHeight - log1.clientHeight - 1) {\n                stickToBottom = false\n                return;\n            }\n            this.setState({ id: json.id, last_num: json.next, arrLogs: this.state.arrLogs });\n            if (stickToBottom) {\n                //log1.scrollTo(0, log1.scrollHeight)\n                log1.scrollTop = log1.scrollHeight;  //滚动条在最下面\n            }\n        }\n    }\n\n    async fetchData(url, prems) {\n        url = url + \"?rd=\" + Math.random();\n        for (var i in prems) {\n            url += \"&\" + i + \"=\" + prems[i];\n        }\n\n        let result = await fetch(url, { method: \"GET\" });\n        try {\n            result = await result.json();\n            this.showlog(result)\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    componentWillMount() {\n        var intervalId = setInterval(() => {\n            this.fetchData(\"/_sys/server/logs\", {\n                last_num: this.state.last_num,\n                id: this.state.id\n            })\n        }, 1000)\n        this.setState({ intervalId: intervalId })\n    }\n\n    componentWillUnmount() {\n        console.log(`Clearing ShowLogs Interval ${this.state.intervalId}`)\n        clearInterval(this.state.intervalId)\n    }\n\n    render = () => {\n        return (\n            <div style={{ height: \"95vh\", overflow: \"scroll\" }} ref=\"scroll_con\">\n                {\n                    this.state.arrLogs.map(log => {\n                        return <AnsiColors log={log.val} />\n                    })\n                }\n            </div>\n        );\n    };\n}","\nimport React from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nexport const EditableFormRow = Form.create()(EditableRow);\n\nexport class EditableCell extends React.Component {\n    state = {\n        editing: false,\n    };\n\n    toggleEdit = () => {\n        const editing = !this.state.editing;\n        this.setState({ editing }, () => {\n            if (editing) {\n                this.input.focus();\n            }\n        });\n    };\n\n    save = e => {\n        const { record, handleSave } = this.props;\n        this.form.validateFields((error, values) => {\n            if (error && error[e.currentTarget.id]) {\n                return;\n            }\n            this.toggleEdit();\n            handleSave({ ...record, ...values });\n        });\n    };\n\n    renderCell = form => {\n        this.form = form;\n        const { children, dataIndex, record, title } = this.props;\n        const { editing } = this.state;\n        return editing ? (\n            <Form.Item style={{ margin: 0 }}>\n                {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                        {\n                            required: true,\n                            message: `${title} is required.`,\n                        },\n                    ],\n                    initialValue: record[dataIndex],\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n            </Form.Item>\n        ) : (\n                <div\n                    className=\"editable-cell-value-wrap\"\n                    style={{ paddingRight: 24 }}\n                    onClick={this.toggleEdit}\n                >\n                    {children}\n                </div>\n            );\n    };\n\n    render() {\n        const {\n            editable,\n            dataIndex,\n            title,\n            record,\n            index,\n            handleSave,\n            children,\n            ...restProps\n        } = this.props;\n        return (\n            <td {...restProps}>\n                {editable ? (\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n                ) : (\n                        children\n                    )}\n            </td>\n        );\n    }\n}\n\nexport class EditableTable extends React.Component {\n    constructor(props) {\n        super(props);\n        let { dataSource } = this.props;\n        dataSource = JSON.parse(dataSource);\n        dataSource = Object.keys(dataSource).map(key => {\n            let value = dataSource[key];\n            return { key: key, value: value, description: \"\" };\n        });\n\n        this.columns = [\n            {\n                title: 'key',\n                dataIndex: 'key',\n                editable: true,\n            },\n            {\n                title: 'value',\n                dataIndex: 'value',\n                editable: true,\n            },\n            {\n                title: 'operation',\n                dataIndex: 'operation',\n                render: (text, record) =>\n                    this.state.dataSource.length >= 1 ? (\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n                            <a href=\"javascript:;\">Delete</a>\n                        </Popconfirm>\n                    ) : null,\n            },\n        ];\n\n        this.state = {\n            dataSource: dataSource,\n            count: dataSource.length,\n        };\n    }\n\n    handleDelete = key => {\n        const dataSource = [...this.state.dataSource];\n        this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n    };\n\n    handleAdd = () => {\n        const { count, dataSource } = this.state;\n        const newData = {\n            key: count,\n            value: `Edward King ${count}`,\n        };\n        this.setState({\n            dataSource: [...dataSource, newData],\n            count: count + 1,\n        });\n    };\n\n    handleSave = row => {\n        const newData = [...this.state.dataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        this.setState({ dataSource: newData });\n    };\n\n    render() {\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        return (\n            <div style={{ paddingRight: \"20px\" }}>\n                <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n                    Add a row\n                </Button>\n                <Table\n                    components={components}\n                    rowClassName={() => 'editable-row'}\n                    bordered\n                    dataSource={this.state.dataSource}\n                    columns={columns}\n                />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Drawer, Table, notification, Input, Select, Tag, Alert, Button, Icon, Row, Col } from \"antd\";\nimport { message } from 'antd';\nimport { EditableCell, EditableFormRow } from './lib/EditableTable';\nimport { UnControlled as CodeMirror } from 'react-codemirror2'\nimport 'codemirror/lib/codemirror.css';\nimport \"./codeMirror.css\";\nimport 'codemirror/mode/sql/sql';\nimport 'codemirror/theme/neo.css';\n\n\nexport default class StreamingSql extends React.Component {\n    state = {\n        create: false,\n        jobId: null,\n        jobName: null,\n        engine: \"FlinkStreamSql\",\n        query: \"create input table xxx()\",\n        config: {},\n        editConfig: {},\n        showErrorMessage: \"\",\n        visible: false,\n        saveing: false\n    };\n\n    columns = [\n        {\n            title: 'key',\n            dataIndex: 'key'\n        },\n        {\n            title: 'value',\n            dataIndex: 'value',\n            editable: true\n        },\n    ];\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    constructor(props, context) {\n        super()\n\n        this.state.jobId = props.match.params.jobId;\n        if (props.location.state !== undefined) {\n            this.state.jobName = props.location.state.jobName;\n        }\n        this.state.create = this.state.jobName !== undefined && this.state.jobName !== null;\n    }\n\n    async fetchGetData(url) {\n        let result = await fetch(url, { method: \"GET\" });\n        result = await result.json();\n        this.setState({ jobName: result.jobName, query: result.queryText, engine: result.type, config: JSON.parse(result.config), editConfig: JSON.parse(result.config) })\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillMount() {\n        if (this.state.jobId !== undefined && !this.state.create) {\n            this.fetchGetData(`/_sys/job_manger/job/${this.state.jobId}`)\n        }\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description,\n            duration: 6\n        });\n    };\n\n    async jobSave() {\n        this.setState({ saveing: true });\n        let result = await fetch(\"/_sys/job_manger/save\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: this.state.jobId,\n                jobName: this.state.jobName,\n                queryText: this.state.query,\n                type: this.state.engine,\n                config: JSON.stringify(this.state.config)\n            }),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        });\n        try {\n            result = await result.json();\n            if (result.success === false) {\n                this.setState({ showErrorMessage: result.message })\n                return;\n            }\n            message.success(`Save job ${this.state.jobName} success`, 5);\n        } finally {\n            this.setState({ saveing: false });\n        }\n    }\n\n\n    render = () => {\n        const { Option } = Select;\n\n        const getErrorMessage = () => {\n            if (!this.state.showErrorMessage) return;\n            return (\n                <Alert\n                    message={\"Error\"}\n                    description={<pre>{this.state.showErrorMessage}</pre>}\n                    type={\"error\"}\n                    showIcon\n                    closable\n                    onClose={() => this.setState({ showErrorMessage: '' })}\n                />\n            )\n        }\n\n        const saveingIcon = () => {\n            if (!this.state.saveing) {\n                return;\n            }\n            return (<Icon type=\"loading\" />)\n        }\n\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    handleSave: (e) => {\n                        this.state.editConfig[e.key] = e.value\n                        this.setState({ editConfig: this.state.editConfig })\n                    },\n                }),\n            };\n        });\n        return (\n            <div>\n                {getErrorMessage()}\n                <Row style={{ margin: \"10px\" }}>\n                    <Col span={4} >\n                        <Tag style={{ fontSize: \"16px\", padding: \"5px 25px\" }} color=\"blue\">Job: {this.state.jobName}</Tag>\n                    </Col>\n                    <Col span={20} style={{ textAlign: 'right' }}>\n                        <Select style={{ margin: \"0 10px\" }} defaultValue=\"FlinkStreamSql\" value={this.state.engine} onSelect={(e) => { this.setState({ engine: e }) }}>\n                            <Option value=\"FlinkStreamSql\">FlinkStreamSql</Option>\n                            <Option value=\"SparkStreamingSql\">SparkStreamingSql</Option>\n                            <Option value=\"StructuredStreamingSql\">StructuredStreamingSql</Option>\n                        </Select>\n                        <Button type=\"primary\" icon=\"setting\" onClick={this.showDrawer}>Setting</Button>\n                        <Button style={{ margin: \"0 10px\" }} type=\"primary\" icon=\"file\" >Files</Button>\n                        <Button type=\"primary\" icon=\"save\" onClick={() => this.jobSave()}>Save{saveingIcon()}</Button>\n                    </Col>\n                </Row>\n                <CodeMirror\n                    value={this.state.query}\n                    style={{\n                        \"min-height\": \"100%\",\n                        height: \"auto\"\n                    }}\n                    options={{\n                        lineNumbers: true,                     //显示行号  \n                        mode: { name: \"text/x-sql\" },          //定义mode  \n                        extraKeys: { \"Ctrl\": \"autocomplete\" },   //自动提示配置  \n                        theme: \"neo\"        //material or ambiance         //选中的theme  \n                    }}\n                    onChange={(editor, data, value) => {\n                        this.state.query = value;\n                    }}\n                />\n                <div>\n                    <Drawer\n                        title=\"Setting job config\"\n                        width={\"50%\"}\n                        onClose={()=>{\n                            this.setState({\n                                visible: false,\n                                editConfig: this.state.config\n                            });\n                        }}\n                        visible={this.state.visible}\n                    >\n                        {/* <EditableTable dataSource={this.state.config}></EditableTable> */}\n                        <p>basic configuration:</p>\n                        <Table components={components} scroll={{ y: 420 }} pagination={{ pageSize: 50 }} dataSource={(() => {\n                            let map = this.state.editConfig\n                            return Object.keys(map).map(key => { return { key: key, value: map[key], description: \"\" } });\n                        })()\n                        } columns={columns} />\n                        <div\n                            style={{\n                                position: 'absolute',\n                                left: 0,\n                                bottom: 0,\n                                width: '100%',\n                                borderTop: '1px solid #e9e9e9',\n                                padding: '10px 16px',\n                                background: '#fff',\n                                textAlign: 'right',\n                            }}\n                        >\n                            <Button onClick={() => {\n                                this.setState({\n                                    visible: false,\n                                    editConfig: this.state.config\n                                });\n                            }} style={{ marginRight: 8 }}>Cancel</Button>\n                            <Button onClick={() => {\n                                this.setState({\n                                    visible: false,\n                                    config: this.state.editConfig\n                                });\n                            }} type=\"primary\">Save</Button>\n                        </div>\n                    </Drawer>\n                </div>\n            </div>\n        );\n    };\n}","import React from \"react\";\n\nexport default class StreamingSql extends React.Component {\n    state = {\n        jobId: null,\n        graph: \"\"\n    };\n    constructor(props, context) {\n        super()\n        console.log(props)\n        this.state.jobId = props.location.state.data.jobId\n    }\n\n    async fetchGetData(url, prems) {\n        url = url + \"?rd=\" + Math.random();\n        for (var i in prems) {\n            url += \"&\" + i + \"=\" + prems[i];\n        }\n\n        let result = await fetch(url, { method: \"GET\" });\n        result = await result.json();\n        this.setState({ graph: result.query, jobType: result.jobType, config: result.config })\n    }\n\n    componentWillMount() {\n        if (this.state.jobId !== undefined) {\n            this.fetchGetData(\"/_sys/etl_builder/get\", { jobId: this.state.jobId })\n        }\n    }\n\n    onEditChange(e) {\n        this.setState({ query: e.target.value })\n    }\n\n    render = () => {\n        return (\n            <div>\n                etl job: {this.state.jobId}\n                <p>not support</p>\n                <div id={\"actuators_select\"}></div>\n                <div id={\"control-panel\"}></div>\n                <div id={\"flow_modal\"}></div>\n                <div id={\"flow-panel\"} style={{ height: \"95vh\", width: \"100px\" }}></div>\n            </div>\n        );\n    };\n}","import React from \"react\";\nimport { Table, Tag } from \"antd\";\n\nexport default class ConnectorList extends React.Component {\n    state = {\n        connectors: []\n    };\n\n    columns = [\n        {\n            title: 'connector',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => {\n                return (<Tag key={name} onClick={() => {\n                    debugger\n                }}>{name}</Tag>)\n            }\n        },\n        {\n            title: 'driver',\n            dataIndex: 'driver',\n            key: 'driver',\n        },\n        {\n            title: 'type',\n            dataIndex: 'type',\n            key: 'type',\n            render: (type, record) => {\n                return <Tag color={\"blue\"} key={type}>{type}</Tag>\n            }\n        },\n        {\n            title: 'realTime',\n            dataIndex: 'realTime',\n            key: 'realTime'\n        }\n    ];\n\n\n    async fetchData() {\n        let result = await fetch(\"/_sys/plugin/list_connectors\", {\n            method: \"GET\"\n        });\n\n        result = await result.json();\n        if (Object.values(result).length === 0) {\n            return;\n        }\n        this.setState({\n            connectors: [].concat.call(...(Object.values(result)))\n        });\n    }\n\n    componentWillMount() {\n        this.fetchData()\n    }\n\n    render = () => {\n        return (\n            <div>\n                <Table dataSource={this.state.connectors} columns={this.columns} expandedRowRender={record => {\n                    debugger;\n                    return (<p style={{ margin: 0 }}>{JSON.stringify(record.config)}</p>);\n                }} />\n            </div>\n        );\n    };\n}","import React from \"react\";\nimport { Table, message, Row, Col, Tag, Button, Popconfirm, Icon } from \"antd\";\n\nexport default class ConnectorManager extends React.Component {\n    state = {\n        loading: false,\n        connector: []\n    };\n\n    columns = [\n        {\n            title: 'name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => {\n                return (<Tag key={name} onClick={() => {\n                }}>{name}</Tag>)\n            }\n        },\n        {\n            title: 'size',\n            dataIndex: 'size',\n            key: 'size'\n        },\n        {\n            title: 'loadTime',\n            dataIndex: 'loadTime',\n            key: 'loadTime'\n        },\n        {\n            title: 'action',\n            dataIndex: 'action',\n            key: 'action',\n            render: (name, record) => {\n                return (<Popconfirm\n                    title=\"Are you sure Delete this moudle?\"\n                    onConfirm={async () => {\n                        this.setState({ loading: true })\n                        await fetch(`/_sys/plugin/delete_module/?name=${record.name}`, { method: \"GET\" })\n                        this.fetchData();\n                    }}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                    placement=\"left\"\n                >\n                    <a href=\"#\" style={{ color: \"red\" }}>Delete</a>\n                </Popconfirm>)\n            }\n        }\n    ];\n\n\n    async fetchData() {\n        let result = await fetch(\"/_sys/plugin/list_modules\", {\n            method: \"GET\"\n        });\n\n        result = await result.json();\n        this.setState({\n            loading: false,\n            connector: result\n        });\n    }\n\n    componentWillMount() {\n        this.fetchData()\n    }\n\n    async reloadConnectors() {\n        this.setState({ loading: true })\n        await fetch(\"/_sys/plugin/reload\", { method: \"GET\" });\n        message.success(`reload success`);\n        this.fetchData();\n    }\n\n    render = () => {\n        const loadingIcon = () => {\n            if (!this.state.loading) {\n                return;\n            }\n            return (<Icon type=\"loading\" />)\n        }\n\n        return (\n            <div>\n\n                <Row style={{ margin: \"10px\" }}>\n                    <Col style={{ textAlign: 'right' }}>\n                        <Button type=\"primary\" icon=\"setting\" onClick={this.reloadConnectors.bind(this)}>Reload{loadingIcon()}</Button>\n                    </Col>\n                </Row>\n\n                <Table dataSource={this.state.connector} columns={this.columns} expandedRowRender={record => {\n                    debugger\n                    return (<div>\n                        {\n                            record.drivers.map(x => {\n                                return (<Tag key={x} color={\"blue\"}> {x}</Tag>)\n                            })\n                        }\n                    </div>)\n                }} />\n            </div >\n        );\n    };\n}","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Modal, Layout } from \"antd\";\nimport Menu from \"./Menu\";\nimport { WrappedNormalLoginForm } from \"./Login\";\nimport JobList from \"./JobList\";\nimport ServerLog from \"./ServerLog\";\nimport StreamingSql from \"./StreamingSql\";\nimport StreamingEtl from \"./StreamingEtl\";\nimport ConnectorList from \"./ConnectorList\";\nimport ConnectorManager from \"./ConnectorManager\";\n\n\nconst { Content } = Layout;\n\nexport default class App extends React.Component {\n\n  state = {\n    login: false,\n    loading: true,\n    userName: null\n  }\n\n  async login() {\n    let result = await fetch(\"/_sys/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        userName: \"\",\n        password: \"\"\n      }),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n    result = await result.json();\n    if (result.success === false) {\n      this.setState({ login: false, loading: false })\n    } else {\n      this.setState({ userName: result.userName, login: true, loading: false })\n    }\n  }\n\n  logout() {\n    Modal.confirm({\n      title: 'Do you Want to Logout this account?',\n      content: this.state.userName,\n      onOk: async () => {\n        let result = await fetch(\"/_sys/auth/logout\", { method: \"GET\" });\n        result = await result.json();\n        this.setState({ login: false })\n      },\n      onCancel: () => {\n        console.log('Cancel');\n      },\n    });\n  }\n\n  componentWillMount() {\n    this.login()\n  }\n\n  render = () => {\n    if (this.state.loading) return (<span></span>)\n    if (this.state.login !== true) {\n      return (<WrappedNormalLoginForm afterLogin={(userName) => this.setState({ userName: userName, login: true })} />);\n    }\n    return (\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Menu logout={this.logout.bind(this)} />\n        <Layout>\n          <Content style={{ margin: \"16px 16px\", background: \"white\" }}>\n            <Route exact path=\"/\" component={JobList} />\n            <Route path=\"/joblist\" component={JobList} />\n            <Route path=\"/connectors\" component={ConnectorList} />\n            <Route path=\"/connector_manager\" component={ConnectorManager} />\n\n            <Route path=\"/serverLogs\" component={ServerLog} />\n            <Route path=\"/streamingSql/:jobId\" component={StreamingSql} />\n            <Route exact path=\"/streamingSql\" component={StreamingSql} />\n            <Route path=\"/streamingEtl\" component={StreamingEtl} />\n            <Route path=\"/abc\" component={() => <span>AAAAAA</span>} />\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport App from \"./App\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/\" component={App} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}